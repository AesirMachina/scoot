syntax = "proto3";

// TODO(dbentley): integrate this into our go build
// For now, to compile into daemon.pb.go, you need to:
// install a protoc with libproto version >= 3.0.0 from https://github.com/google/protobuf
// install protoc-gen-go from https://github.com/golang/protobuf (you need this to be on your $PATH, not your GOPATH)
// in this directory (github.com/scootdev/scoot/daemon/protocol), run:
// protoc -I . daemon.proto --go_out=plugins=grpc:.


// Protocol for talking to a Local Scoot Daemon.

package protocol;

service ScootDaemon {
  rpc Echo (EchoRequest) returns (EchoReply) {}

  rpc CreateSnapshot(CreateSnapshotRequest) returns (CreateSnapshotReply) {}
  rpc CheckoutSnapshot(CheckoutSnapshotRequest) returns (CheckoutSnapshotReply) {}
  rpc Run(RunRequest) returns (RunReply) {}
  rpc Poll(PollRequest) returns (PollReply) {}
}

// Echo (for testing only).
//
message EchoRequest {
  string ping = 1;
}

message EchoReply {
  string pong = 1;
}


// Create snapshot.
//
message CreateSnapshotRequest {
  // Absolute path to a file or directory on the local filesystem.
  string path = 1;
}

message CreateSnapshotReply {
  string error = 1;
  string snapshot_id = 2;
}


// Checkout snapshot.
//
message CheckoutSnapshotRequest {
  string snapshot_id = 1;

  // Absolute path to a directory on the local filesystem (need not exist yet).
  string dir = 2;
}

message CheckoutSnapshotReply {
  string error = 1;
}


// Run
//
message RunRequest {
  message Command {
    repeated string argv = 1;
    map<string, string> env = 2;
    int64 timeout_ns = 3; //TODO: consistent special values for timeouts like PollRequest.timeout_ns?
  }
  message OutputPlan {
    bool stdout = 1;
    bool stderr = 2;

    // After the run is done, generate a snapshot containing only the specified src paths.
    // This copies the src files/dirs into the corresponding destination directories.
    // The sources and destinations are all relative paths within the snapshot.
    // An empty map will result in an empty snapshot (except for stdout/stderr).
    // Behavior is undefined for duplicate entries within a destination.
    // Sources may include the '*' wildcard.
    map<string, string> src_paths_to_dest_dirs = 3;
  }
  string snapshot_id = 1;
  Command cmd = 2;
  OutputPlan plan = 3;
}

message RunReply {
  string run_id = 1;
  string error = 2;
}


// Poll
//
message PollRequest {
  repeated string run_ids = 1;
  int64 timeout_ns = 2; // <0 to block indefinitely, 0 to return immediately, >0 to wait for results before returning.
}

message PollReply {
  enum State {
    UNKNOWN = 0;
    PENDING = 1;
    RUNNING = 2;
    COMPLETED = 3;
    FAILED = 4;
  }
  message Result {
    string run_id = 1;
    State state = 2;
    int32 exit_code = 3;
    string error = 4;
    string snapshot_id = 5;
  }
  repeated Result results = 1;
}
