// Code generated by go-bindata.
// sources:
// config/local.local
// config/local.memory
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configLocalLocal = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8e\xb1\x6e\x2a\x31\x10\x45\x7b\xbe\xc2\x72\x4d\x81\x78\x7a\x0d\x2d\xa4\x89\x82\x82\x60\xa5\xd4\xc6\x7b\xbd\xb1\x98\xdd\x59\x8d\xc7\x51\x50\xc4\xbf\xc7\x4e\xd8\xa0\x88\x94\x73\xcf\x9d\x99\xf3\x31\x33\xc6\xae\x29\x27\x85\xd8\x95\xa9\x63\x09\x9a\xf3\x88\x32\x59\x62\xef\xc8\x96\xec\x32\xaf\xbd\x17\x96\x13\x24\xdd\xf7\x64\xf4\x76\xfe\x1d\xed\x98\x28\x0e\xdd\x0e\x12\xb9\xad\x6c\xf9\x7f\xd1\xa7\x89\x3e\x0c\x81\xc5\xa3\x71\xe9\xd4\xc4\x1e\x9c\xb5\x54\x54\x32\xae\xfc\x37\xb0\xff\x16\xfd\xed\xfb\xc1\xbf\xa2\xcd\x04\x59\xf3\x10\x62\x77\x6f\x91\xd4\x29\x42\xa6\xe9\xd9\xd6\xbd\xef\xa1\x12\x91\x8a\x4d\xbd\x6c\xcd\xca\x2c\xaf\x70\x83\x63\xee\xb6\xdc\xa2\x86\xc1\x51\x9a\x14\xf6\xf0\xfc\x06\x79\xe4\x63\x7a\x1e\x0e\xea\x44\xf3\xf8\xd3\xb9\xc9\xb8\xce\x3d\xf1\x1f\x12\x21\x12\x26\x81\x4d\x14\x78\x65\x39\x7f\xd9\x95\x0d\x2a\x1b\xf5\xc4\xec\xf2\x19\x00\x00\xff\xff\x47\x47\xda\xcf\x78\x01\x00\x00")

func configLocalLocalBytes() ([]byte, error) {
	return bindataRead(
		_configLocalLocal,
		"config/local.local",
	)
}

func configLocalLocal() (*asset, error) {
	bytes, err := configLocalLocalBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/local.local", size: 376, mode: os.FileMode(420), modTime: time.Unix(1482941858, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configLocalMemory = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8f\xb1\x8e\x83\x30\x10\x44\x7b\xbe\xc2\x72\x7d\xc5\xdd\x95\xb4\x5c\x75\x0a\x4a\x04\xfc\x80\x81\x81\xa0\x18\x16\xad\xd7\x51\x50\xc4\xbf\xc7\x56\x48\x52\x24\xe5\x7b\x3b\x1a\xcd\x5e\x13\xa5\x74\x66\xbd\x13\xb0\x4e\x55\xc4\x20\xaa\x65\x46\x20\x3d\x62\x24\x5e\xf4\xd7\xdd\x66\xe4\x27\x09\xfa\xe7\x3b\xf0\x1a\xa5\x2e\x9b\x23\x5a\x6f\xc1\x19\x4d\xdd\xd0\xbf\x37\x38\x31\x82\xce\xdb\x47\x47\x6e\x2e\x05\x84\x07\xb8\x03\xb8\x32\xee\xa4\x55\xaa\x7e\xb7\xe3\x1f\x6a\xdf\xe7\xd4\x22\xca\xce\x58\x87\xed\x50\xa0\xa1\x33\xf8\x9f\x6a\xb7\x9f\x4a\x31\x2c\x7e\x7e\x66\x5e\x63\x4c\x6f\x76\xf4\x61\xc4\xf6\x46\x0c\x26\xeb\x2d\x00\x00\xff\xff\xee\x81\x77\x5b\xf2\x00\x00\x00")

func configLocalMemoryBytes() ([]byte, error) {
	return bindataRead(
		_configLocalMemory,
		"config/local.memory",
	)
}

func configLocalMemory() (*asset, error) {
	bytes, err := configLocalMemoryBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/local.memory", size: 242, mode: os.FileMode(420), modTime: time.Unix(1482939700, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/local.local": configLocalLocal,
	"config/local.memory": configLocalMemory,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config": &bintree{nil, map[string]*bintree{
		"local.local": &bintree{configLocalLocal, map[string]*bintree{}},
		"local.memory": &bintree{configLocalMemory, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

